@page "/play"
@inject IStringLocalizer<Play> L
@inject RoundTranslator RoundTranslator
@inject PointsInRoundTranslator PointsInRoundTranslator

@inject NewCelebrities.Web.Services.GameCreator gameCreator

<div class="container m-auto max-w-2xl">

    @if (game is not null)
    {
        if (game.ShowRoundStart)
        {
            <RoundStartSummary Round="game.RoundContext.CurrentRound" OnRoundSummaryClosed="() => game.StartTeamPreparation()" />
        }
        if (game.ShowTeamPreparation)
        {
            <div class="flex flex-col ">
                <h2 class="flex items-center justify-center space-x-6 mb-3">
                    <span class="uppercase font-bold tracking-widest">
                        @L["TurnOf"]
                    </span>
                    <TeamCard Team="game.CurrentTeam" />
                </h2>
                <div class="@Styles.Paragraph mb-8 italic text-center">
                    @L["BeReady"]
                </div>
                <CustomButton OnClick="() => game.StartGuessing()" AdditionalStyles="w-full" Height="CustomButton.ButtonHeight.Standard">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor"
                 viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z">
                        </path>
                    </svg>
                </CustomButton>
            </div>
        }
        if (game.WeAreGusessing)
        {
            <div class="md:hidden text-xl mb-4">
                @RoundTranslator.Text(game.RoundContext.CurrentRound)
            </div>
            <div class="flex flex-col space-y-4">
                <div class="flex justify-between">
                    <div>
                        <TeamCard Team="game.CurrentTeam" />
                    </div>

                    <div class="hidden md:flex text-xl">
                        @RoundTranslator.Text(game.RoundContext.CurrentRound)
                    </div>

                    <div>
                        <TimerAlarm @ref="timeAlarm" TimesUp="() => game.OnTimesUp()" Seconds="game.SecondsPerTurn" />
                    </div>
                </div>

                <CharacterCard Character="game.Deck.VisibleItem.Character" ShowInfo="!game.HeroMode" />
                <div class="flex justify-between space-x-4">
                    <CustomButton OnClick="() => game.GuessVisibleItem()" Style="@Styles.Button" AdditionalStyles="w-4/5" Height="CustomButton.ButtonHeight.Standard">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor"
                     viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z">
                            </path>
                        </svg>
                    </CustomButton>

                    <CustomButton Enabled="game.RoundContext.CurrentRound.NextAllowed" OnClick="() => game.SkipToNextItem()" AdditionalStyles="w-1/5" Height="CustomButton.ButtonHeight.Standard">

                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.933 12.8a1 1 0 000-1.6L6.6 7.2A1 1 0 005 8v8a1 1 0 001.6.8l5.333-4zM19.933 12.8a1 1 0 000-1.6l-5.333-4A1 1 0 0013 8v8a1 1 0 001.6.8l5.333-4z">

                            </path>
                        </svg>

                    </CustomButton>

                </div>
            </div>
        }

        if (game.ShowTurnEnd)
        {
            <div class="flex flex-col space-y-4">
                <h2>
                    <TeamCard Team="game.CurrentTeam" />
                </h2>
                <p class="@Styles.Paragraph">
                    @PointsInRoundTranslator.Text(game.TurnContext.LastTurnSummary())
                    .
                    @PointsInRoundTranslator.Message(game.TurnContext.LastTurnSummary())
                </p>
                <CustomButton OnClick="() => game.EndTurn()" AdditionalStyles="w-full" Height="CustomButton.ButtonHeight.Standard">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor"
                 viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z">
                        </path>
                    </svg>
                </CustomButton>
            </div>
        }

        if (game.ShowRoundEnd)
        {
            <div class="flex flex-col space-y-4">
                <h2 class="@Styles.SmallHeader">@RoundTranslator.Text(game.RoundContext.CurrentRound)</h2>

                <Ranking TurnContext="game.TurnContext" TotalRounds="game.RoundContext.TotalRounds" />

                <CustomButton OnClick="() => game.EndRound()" AdditionalStyles="w-full" Height="CustomButton.ButtonHeight.Standard">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z">
                        </path>
                    </svg>
                </CustomButton>
            </div>
        }

        if (game.ShowGameEnd)
        {
            <div class="flex flex-col space-y-10">
                <h2 class="text-center text-3xl">End of game</h2>
                <h2 class="flex items-center justify-center space-x-6 mb-3 text-2xl">
                    <span class="uppercase font-semibold tracking-widest">
                        🎉 @L["Winner"] :
                    </span>
                    <TeamCard Team="game.TurnContext.Winner()" />
                    <span>
                        🎉
                    </span>
                </h2>

                <Ranking TurnContext="game.TurnContext" TotalRounds="game.RoundContext.TotalRounds" />
                <CustomButton OnClick="PlayAgain" AdditionalStyles="w-full" Height="CustomButton.ButtonHeight.Standard">
                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    <span class="ml-2 uppercase">
                        @L["PlayAgain"]
                    </span>
                </CustomButton>
            </div>
        }

    }
    else
    {
        <div class="p-20 flex justify-center">
            <div class="loading-spinner"></div>
        </div>
    }

    <MessageAlert Responses="new Responses(response)" />
</div>

@code {
    private TimerAlarm timeAlarm;
    private NewCelebrities.Core.Game game;
    private IResponse response;

    protected override async Task OnInitializedAsync()
    {
        (response, game) = await gameCreator.Create();
    }

    private async Task PlayAgain()
    {
        (response, game) = await gameCreator.Create();
    }
}
